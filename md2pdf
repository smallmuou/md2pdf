#!/bin/bash
#
# Copyright (C) 2018 smallmuou <smallmuou@163.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

set -e

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}

cmdcheck() {
    command -v $1>/dev/null 2>&1 || { error >&2 "Please install command $1 first."; exit 1; }   
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

warn() {
     local yellow="\033[1;33m"
     local normal="\033[0m"
     echo -e "[${yellow}WARNING${normal}] $1"
}

yesno() {
    while true;do
    read -p "$1 (y/n)" yn
    case $yn in
        [Yy]) $2;break;;
        [Nn]) exit;;
        *) echo 'please enter y or n.'
    esac
done
}

curdir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    elif [ -L $0 ];then
        name=`readlink $0`
        echo $(dirname $name)
    else
        echo "`pwd`/$(dirname $0)"
    fi
}

myos() {
    echo `uname|tr "[:upper:]" "[:lower:]"`
}

#########################################
###           GROBLE DEFINE           ###
#########################################

VERSION=1.0.0
AUTHOR=smallmuou

#########################################
###             ARG PARSER            ###
#########################################

usage() {
prog=`basename $0`
cat << EOF
$prog version $VERSION by $AUTHOR

USAGE: $prog [OPTIONS] mdfile pdffile

DESCRIPTION:
    convert markdown file to pdf file.

DEPENDENCIES:
    brew install ghostscript
    npm install gitbook
    npm install gitbook-pdf -g

OPTIONS:
    -h      Show this help message and exit

EXAMPLES:
    $prog hello.md hello.pdf

EOF
exit 1
}

while getopts 'h' arg; do
    case $arg in
        h)
            usage
            ;;
        ?)
            # OPTARG
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))


#########################################
###            MAIN ENTRY             ###
#########################################

cmdcheck gitbook
cmdcheck gs

[ $# -ne 2 ] && usage

base_dir=/tmp/md2pdf
src_file=$1
dst_file=$2

rm -rf $base_dir
mkdir $base_dir

[ ! -f "$src_file" ] && { error "$src_file does not exist."; exit -1; }

dir_name=`dirname "$src_file"`

tmp_file=$base_dir/tmp.md
tmp1_file=$base_dir/tmp1.md
cp "$src_file" "$tmp_file"

spushd $dir_name

images=`cat $tmp_file|sed -n "s/!\[.*\](\(.*\))/\1/p"|awk '{print $1}'`

for image in $images
do
    datafile=$base_dir/image.data
    base64 $image > $datafile
    image=`echo $image|sed 's#/#\\\/#g'`
    perl -pe "s#\!\[.*\]\($image.*\)#==$image\n)#g" $tmp_file > $tmp1_file 
    printf '%s\n' "/==$image/r $datafile" w | ed $tmp1_file > /dev/null
    perl -pe "s#==$image\n#\!\[\]\(data:image\/png;base64,#g" $tmp1_file > $tmp_file
done

spopd

cp $tmp_file $base_dir/README.md

spushd $base_dir
gitbook pdf
gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dFirstPage=2 -dCompatibilityLevel=1.4  -sOutputFile=1.pdf book.pdf
spopd

mv $base_dir/1.pdf $2

